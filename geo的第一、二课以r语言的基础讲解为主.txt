
特别告知：版权属于华哥，所有单位或个人未经许可 禁止翻录和传播 违者我们将追究法律责任 
华哥：15623525389（举报电话） 公众号：Bioinformation

###什么是函数，什么是r包，为什么加载r包
##安装r包的几个方法
# 1.在CRAN 存储库的r包
install.packages（"xxx"）
# 2.在Bioconductor存储库中的r包
if(!requireNamespace("BiocManager",quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("GEOquery")
## 3.在GitHub储存库中r包
library(devtools)
install_github("authorName/repositoryName")
## To install ggplot2 from github:
devtools::install_github("tidyverse/ggplot2")
### 加载r包


##  1  CRAN
install.packages("clusterProfiler")
##  2  Bioconductor
install.packages(“BiocManager”)

library(BiocManager)

BiocManager::install("clusterProfiler")
install()
##  3 GitHub
devtools::install_github("clusterProfiler") 

?Sys.setenv
##系统报错改为英文
Sys.setenv(LANGUAGE = "en")
##禁止转化为因子
options(stringsAsFactors = FALSE)
##清空环境
rm(list=ls())


install.packages("tidyverse")

BiocManager::install('GEOquery')

install.packages('GEOquery')

BiocManager::install("GEOquery")
 
  <-  =

?library
library('GEOquery')
library(dplyr)
library(tidyverse)
?library
##设置路径
getwd()




setwd("D:\\shangke\\lession1")

setwd("D:/shangke/lession1")

setwd("D:\\shangke/lession1/")




setwd("D:\\shangke\\lession1/")
setwd("D:/shangke/lession3/")
a
#library(BiocManager)
#install("AUCell")
BiocManager::install("AUCell")


 
a=c(1,2,3,4)
a1=c("1","2","3")
class(a1)
d=1
c=1
class(a)
class(b)
class(x1)


b=c("a","b","c","d")
x1=c(a,b,c,d)


那我要是只想命名第一个第二个和第四个呢 

names(b)=c("z3","z4","z5","z6","z7")
names(b)=c("m1","m2","m3")


name(b)[1:2,4]=c("m1","m2","m3")
names(b)[c(1,2,4)]=c("m1","m2","m3")
b
names(b)[1]="k1"
b
b[3]
b[c(2,4)]

b["m3"]
b1=c(a,b,c)
b2=c(a,b,c,d)
character()
a[4]
b[1,2]
b[1][2]
b[1:3]
b[c(1,3)]
1:3
d=c(T,F,T)
d[c(1,3)]
e=c(1:50)
print(e)
f=c("aaaa")
a=c(1,2)
f[3]
class(d)
class(f)
b[3]="xy"
b[3:4]
b[c(3,4)]
b[c(3,1)]
b[2]="mmm"
b[c(1,2)]=c(5,6)
b[c(1,3)]=c("m4","m2","m3")
b[1:3]=c("m1","m2")

b[c(1,3)]="m1"
f=c(1,2,3,"a","b")
class(f)
f[7]
f=f[-4]
f=f[-c(1:4)]
####################################################################################################
### 获取表达矩阵
?getGEO

x=1:100
x

getwd()
##下载数据 getGPL = F 这个代表不下载平台注释文件，因为有时候网络不稳定。后面我们会在网页中下载，然后读取。

gset = getGEO(GEO='GSE12417', destdir=".",getGPL = F)

gset = getGEO(getGPL = F,'GSE12417', destdir=".")





class(gset)
print(gset)
View(gset)
class(gset)
names(gset)
e2=gset[[2]]
e2.1=gset[["GSE12417-GPL96_series_matrix.txt.gz" ]]
class(e2)
e2.2=gset[["GSE12417-GPL96_series_matrix.txt.gz"]]
gset <- getGEO('GSE12417', destdir=".",getGPL = F)

save(gset,file = "gset.rdata")
getGEO('GSE12417', destdir=".",getGPL = F)
s4    s3:matrix 矩阵 data.frame() 数据框  character() 向量字符型 list 列表



x=c("zzz","yyy")
y=c("zy","yq")
z1=list(x=c("zzz","yyy"),y=c("zy","yq"))
View(z1)
View(z1)
z2=list(x,y)
View(z2)
View(x)
names(z2)=c("m1","m2")

####r语言中 所有的提取 都是用中括号

###一种提取按照排列顺序
z1[[2]]

z[[2]]

x[1]
###按照对象名称
p1="x"
z1[[p1]]
z1[[c("zzz","yyy")]]

k1=z1[[1]]
z1[[1]]=c(1,2,3,4)

class(x)

class(z1)


###打开study这个文件夹 我们会发现平台信息文件也下载好了
##保存下载的数据 保存为rdata 当然也可以保存为rds
save(gset,file = "12.9.gse12417.rdata")

load("12.9.gse12417.rdata")



getwd()
save(gset,file = "3.gse12417.rdata")
saveRDS(gset,file = "gse12417.rds")
###在读取文件之前 先清空环境
load("3.gse12417.rdata")
x1=readRDS("gse12417.rds")
####查看大的list，可以用view函数 也可以直接在环境中点击gset
View(gset)
###提取list中的第二个元素（部分）
z=gset[["GSE12417-GPL96_series_matrix.txt.gz"]]
##当然也可以安装排序位置来提取
e2=gset[[2]]
e2.2=gset[1]
###查看一下e2的数据结构
class(e2)
###查看一下e2对象的内容包含哪些
View(e2)
###提取表达矩阵
exp=exprs(e2)
class(exp)
##当然也可以用环境中的白色括号提取
exp2=e2@assayData[["exprs"]]

phe=e2@phenoData@data



class(exp2)
##还可以用s4对象的通用方法 注意  单细胞会用到
exp3=e2@assayData$exprs
## 获取分组信息 同理也有三种方法
pdata=pData(e2)
pdata1=e2@phenoData@data

#########################################################################################################
### 整理探针转化文件

library(data.table)
###读取测序平台信息，为了进行探针的转化  这里的探针就是exprSe的行名比如：10344614
###平台文件在geo中下载，下载之后要放在指定的路径下面
###用fread函数读取的目的是多线程快速读取
?fread
getwd()
anno=fread("GPL96-57554.txt",header =T,data.table = F)

 
class(anno)

x1=colnames(anno)
x2=rownames(anno)
x1[1:10]
x2[1:10]


colnames(anno)[4]="name"

colnames(anno)[4]="name"
rownames(anno)[c(5,8)]=c("a1","a2")

anno[3,2]="a3"

x3=anno[3,2]
x3

n1=anno[,5]
class(n1)
n2=anno[5,]

n3=anno[,c(3,5)] 



anno[1,2]
n1=anno[,5]
class(n1)
n2=anno[4,]
class(n2)
anno$ID

n4=anno[,c("ID","Target Description")]
colnames(anno)
n4=anno[c(1,8),]

anno$GB_ACC="aaa"
anno$xyz ="abc"
colnames(anno)
anno$xyz="abc"
anno[,1]
aann[1]
anno[,18]="bcd"
anno<-anno[,c(17,1:16)] 

m2=anno[1]
class(m2)
m1=anno$abc
class(n2)
anno5=fread("GPL96-57554.txt",header = T,data.table = F)
?read.table
class(anno)
anno1=fread("GPL96-57554.txt",sep = "\t",header = T)
class(anno1)
?read.table
anno2=read.table("GPL96-57554.txt",header =T,fill = T)
anno=read.table("GPL96-57554.txt",sep = "\t",header =F,fill = T)
anno3=read.table("GPL96-57554.txt",sep = "\t",header =T,fill = T)
#######说明17行之后也有很多空值
anno4=read.csv("GPL96-57554.txt")
anno5=read.csv("GPL96-57554.txt",sep = "\t")
#######csv只能是以逗号分割的

a1=fread("C:\\data\\GSE129775\\allDiff.txt")

data.frame()

d1 <- data.frame(
  x1= c("a", "b", "c", "d"),
  x2= c(1, 3, 5, 7)
)

d2 <- data.frame(
  y1=c(10, 7, 12),
  y2=c("b", "c", "d"),
  stringsAsFactors=FALSE
)

?merge
d3=merge(d1,d2,by.x = "x1",by.y = "y2")
d4=merge(x=d1,y=d2,by.x = "x1",by.y = "y2")

d5=merge(x=d2,y=d1,by.x = "y2",by.y = "x1")









d3=merge(d1,d2,by.x = y1,by.y = x2)




a1=data.frame(
  x1=c(1, 2, 3),
  x2=c("b", "c", "d"),
  stringsAsFactors=FALSE
)


a2=data.frame(
  x1=c(10, 7, 12),
  x2=c("k1", "k2", "k3"),
  stringsAsFactors=FALSE
)
a3=cbind(a1,a2)
a4=rbind(a1,a2)
##################################
 
###注意fread的各种参数设置
View(anno)
colnames(anno)
gene=anno[,c(1,11)]
gene.1=anno[,c("ID","Gene Symbol")]
###什么是数据框
x=gene$`Gene Symbol`
y=gene$ID


x=gene$`Gene Symbol`
f.j=c(1,2,3,4)
"f j"=c(1,2,3,4)
"f j"=c(1,2,3,4)
x=gene$ID
###这里的gene symbol为什么加引号
gene$Gene.Symbol=x
x1=gene$Gene.Symbol
 
###一定要记住 数据框是由长度相等的向量按照列来排序组成，而且没一个向量是有顺序的
### 同理 矩阵就是数据类型相同的向量组成 一定注意 数据类型和数据结构的概念
###查看一下x1

x1[1:40]
x1[c(1,2,5,14)]
## "DDR1 /// MIR4640"  这个东西叫字符串
### 字符串切割  字符串的处理公众号专门有一篇推文在讲
a1=strsplit(x1,split = " /// ",fixed = T)
##把分割后的字符串的第一个元素提取出来，合并成为一个新的向量
gene.all = sapply   (    a1,     function(x)   {  x [1]    }      )


##第一次循环
a1[[1]]
x=a1[[1]]
x[1]
"DDR1"

##第二次循环
a1[[2]]
x=a1[[2]]
x[1]
"RFC2"

##第三次循环
a1[[2]]
x=a1[[3]]
x[1]
"HSPA6"


c("DDR1","RFC2","HSPA6",......)
gene.all[1:3]

f(x)=x+1
x=1    f(x)=1+1
x=c("a","b")  f(x)=c("a","b")[1]="a"


gene.all[1:50]

##其实就是等同于下面
a1[1]
a1[1][1]
a1[[1]]
a1[[1]][1]

p=a1[[1]]
p2=p[1]
p2
###公众号有一篇图文专门讲apply家族的用法 包括sapply lapply tapply，感兴趣的可以自己去看公众号的推文

### 这时候 我们可以发现anno有22283行，gene.all也是有22283个元素
a3=data.frame(anno$ID,gene.all)
### 这时候的a3创建是否一一对应？  原理：向量是有序的
###向量的特点看r语言基础 第二节课的第6页  向量的特性

###到此为止  我们讲注释的gene symbol文件与表达矩阵都已经准备好了
###########################################################################################
###进行探针的转化
exp=as.data.frame(exp2)###讲矩阵转化为数据框的目的是为了好对表达矩阵进行操作
View(exp) ###行名为探针名 列名为样本名

###探针转化的两种方法
### 一、是用merge函数
?merge
exp1=merge(x=a3,y=exp,by.x =1 ,by.y =0 )
exp1=merge(x=a3,y=exp,by.x ="anno.ID" ,by.y =0 )  ###用1和"anno.ID"的效果是一样的


###整理表达矩阵
rownames(exp1)=exp1$gene.all
###报错的原因就是有重复的基因名  多个探针对应同一个基因
exp2=distinct(exp1,gene.all,.keep_all = T)
###这时候行名已经从22283变成了13238
rownames(exp2)=exp2$gene.all
###发现还是报错 报错的原因是有NA  缺失值
exp3=na.omit(exp2)
### 从13239变成13237 有一个NA  为啥是一个呢？
rownames(exp3)=exp3$gene.all
View(exp3)
###去除第一列和第二列
exp4=exp3[,-c(1,2)]

##################### 第二中探针转化方法
a4=distinct(a3,gene.all,.keep_all = T)
rownames(a4)=a4$gene.all
a5=na.omit(a4)
rownames(a5)=a5$gene.all
jji=intersect(a5$anno.ID,rownames(exp))
###我们发现交集有13237个  是不是与刚才的exp4一样
exp5=exp[a5$anno.ID,]
View(exp5)
rownames(exp5)=a5$gene.all

save.image("E:/study/geo/gse12417.all.RData")
load("E:/study/geo/gse12417.all.RData")


